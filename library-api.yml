openapi: 3.1.0
info:
  title: Library Management API
  version: 1.0.0
  description: API for managing books and authors in a library.
servers:
  - url: http://localhost:3000
paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve a list of books. You can filter by name or release date range.
      parameters:
        - name: bookName
          in: query
          description: Filter books by name
          required: false
          schema:
            type: string
        - name: releaseDate
          in: query
          description: Filter books by release date range
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: Add a new book
      description: Create a new book entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book created successfully
    put:
      summary: Update an existing book
      description: Update a book by providing its ID and updated details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: Book updated successfully
    delete:
      summary: Delete a book
      description: Delete a book by ID.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Book deleted successfully
  /authors:
    get:
      summary: Get all authors
      description: Retrieve a list of authors. You can filter by name.
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      summary: Add a new author
      description: Create a new author entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "201":
          description: Author created successfully
    put:
      summary: Update an existing author
      description: Update an author by providing their ID and updated details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "200":
          description: Author updated successfully
    delete:
      summary: Delete an author
      description: Delete an author by ID.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Author deleted successfully
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          type: string
          enum: [M, F]
